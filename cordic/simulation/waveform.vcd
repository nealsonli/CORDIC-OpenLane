$version Generated by VerilatedVcd $end
$date Sun Nov 20 15:37:37 2022
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 3( i_clk $end
  $var wire 49 K( i_data [48:0] $end
  $var wire  1 ;( i_rst $end
  $var wire  1 C( i_vld $end
  $var wire 49 c( o_data [48:0] $end
  $var wire  1 [( o_vld $end
  $scope module cordic $end
   $var wire 32 5) DATA_OP_WIDTH [31:0] $end
   $var wire 32 %) DATA_WIDTH [31:0] $end
   $var wire 32 s( FUNC_WIDTH [31:0] $end
   $var wire 32 {( NUM_DATA [31:0] $end
   $var wire 32 s( NUM_ITER_PER_STG [31:0] $end
   $var wire 32 =) TOTAL_DATA_OP_WIDTH [31:0] $end
   $var wire 32 -) TOTAL_DATA_WIDTH [31:0] $end
   $var wire 32 E) TOTAL_OP_WIDTH [31:0] $end
   $var wire 32 M) X [31:0] $end
   $var wire 32 s( Y [31:0] $end
   $var wire 32 U) Z [31:0] $end
   $var wire 49 # aa2it_data [48:0] $end
   $var wire  1 g& aa2it_vld $end
   $var wire  1 3( i_clk $end
   $var wire 49 K( i_data [48:0] $end
   $var wire  1 ;( i_rst $end
   $var wire  1 C( i_vld $end
   $var wire 55 M% it2sc_data [54:0] $end
   $var wire  1 3 it2sc_vld $end
   $var wire 49 c( o_data [48:0] $end
   $var wire  1 [( o_vld $end
   $var wire 49 o& r_input_data [48:0] $end
   $var wire  1 g& r_input_vld $end
   $var wire 49 )' r_output_data [48:0] $end
   $var wire  1 !' r_output_vld $end
   $var wire 49 ]% sc2ff_data [48:0] $end
   $var wire  1 3 sc2ff_vld $end
   $scope module u_angle_adjust $end
    $var wire 32 %) DATA_WIDTH [31:0] $end
    $var wire 32 s( FUNC_WIDTH [31:0] $end
    $var wire 16 /* NEG_H_PI [15:0] $end
    $var wire 16 }) NEG_PI [15:0] $end
    $var wire 32 {( NUM_DATA [31:0] $end
    $var wire 16 '* POS_H_PI [15:0] $end
    $var wire 16 u) POS_PI [15:0] $end
    $var wire  1 e) ROT [0:0] $end
    $var wire 32 -) TOTAL_DATA_WIDTH [31:0] $end
    $var wire 32 ]) TOTAL_WIDTH [31:0] $end
    $var wire  1 m) VEC [0:0] $end
    $var wire 32 M) X [31:0] $end
    $var wire 32 s( Y [31:0] $end
    $var wire 32 U) Z [31:0] $end
    $var wire 49 o& i_data [48:0] $end
    $var wire  1 g& i_vld $end
    $var wire 16 ; input_data(0) [15:0] $end
    $var wire 16 < input_data(1) [15:0] $end
    $var wire 16 = input_data(2) [15:0] $end
    $var wire  1 9' input_func [0:0] $end
    $var wire 49 # o_data [48:0] $end
    $var wire  1 g& o_vld $end
    $var wire 16 S output_data(0) [15:0] $end
    $var wire 16 T output_data(1) [15:0] $end
    $var wire 16 U output_data(2) [15:0] $end
    $var wire  1 9' output_func [0:0] $end
   $upscope $end
   $scope module u_cordic_iteration $end
    $var wire 32 5) DATA_OP_WIDTH [31:0] $end
    $var wire 32 %) DATA_WIDTH [31:0] $end
    $var wire 252 7* ELEM_ANGLE [251:0] $end
    $var wire 32 s( EN_SCALE [31:0] $end
    $var wire 32 s( FUNC_WIDTH [31:0] $end
    $var wire 32 {( NUM_DATA [31:0] $end
    $var wire 32 {( NUM_ITER [31:0] $end
    $var wire 32 s( NUM_ITER_PER_STG [31:0] $end
    $var wire 32 {( NUM_STAGE [31:0] $end
    $var wire 32 =) TOTAL_DATA_OP_WIDTH [31:0] $end
    $var wire 32 -) TOTAL_DATA_WIDTH [31:0] $end
    $var wire 32 E) TOTAL_OP_WIDTH [31:0] $end
    $var wire 32 ]) TOTAL_WIDTH [31:0] $end
    $var wire 32 M) X [31:0] $end
    $var wire 32 s( Y [31:0] $end
    $var wire 32 U) Z [31:0] $end
    $var wire 18 U! cordic_data(0)(0)(0) [17:0] $end
    $var wire 18 ]! cordic_data(0)(0)(1) [17:0] $end
    $var wire 18 e! cordic_data(0)(0)(2) [17:0] $end
    $var wire 18 m! cordic_data(0)(1)(0) [17:0] $end
    $var wire 18 u! cordic_data(0)(1)(1) [17:0] $end
    $var wire 18 }! cordic_data(0)(1)(2) [17:0] $end
    $var wire 18 '" cordic_data(1)(0)(0) [17:0] $end
    $var wire 18 /" cordic_data(1)(0)(1) [17:0] $end
    $var wire 18 7" cordic_data(1)(0)(2) [17:0] $end
    $var wire 18 ?" cordic_data(1)(1)(0) [17:0] $end
    $var wire 18 G" cordic_data(1)(1)(1) [17:0] $end
    $var wire 18 O" cordic_data(1)(1)(2) [17:0] $end
    $var wire 18 W" cordic_data(2)(0)(0) [17:0] $end
    $var wire 18 _" cordic_data(2)(0)(1) [17:0] $end
    $var wire 18 g" cordic_data(2)(0)(2) [17:0] $end
    $var wire 18 o" cordic_data(2)(1)(0) [17:0] $end
    $var wire 18 w" cordic_data(2)(1)(1) [17:0] $end
    $var wire 18 !# cordic_data(2)(1)(2) [17:0] $end
    $var wire  1 %! cordic_func(0) [0:0] $end
    $var wire  1 &! cordic_func(1) [0:0] $end
    $var wire  1 '! cordic_func(2) [0:0] $end
    $var wire  1 k cordic_vld(0) $end
    $var wire  1 l cordic_vld(1) $end
    $var wire  1 m cordic_vld(2) $end
    $var wire  1 3( i_clk $end
    $var wire 49 # i_data [48:0] $end
    $var wire  1 ;( i_rst $end
    $var wire  1 g& i_vld $end
    $var wire 55 M% o_data [54:0] $end
    $var wire  1 3 o_vld $end
    $scope module gen_inter_stage $end
     $var wire 18 a' r_cordic_data(0)(0) [17:0] $end
     $var wire 18 i' r_cordic_data(0)(1) [17:0] $end
     $var wire 18 q' r_cordic_data(0)(2) [17:0] $end
     $var wire 18 y' r_cordic_data(1)(0) [17:0] $end
     $var wire 18 #( r_cordic_data(1)(1) [17:0] $end
     $var wire 18 +( r_cordic_data(1)(2) [17:0] $end
     $var wire  1 Q' r_cordic_func(0) [0:0] $end
     $var wire  1 R' r_cordic_func(1) [0:0] $end
     $var wire  1 A' r_cordic_vld(0) $end
     $var wire  1 B' r_cordic_vld(1) $end
    $upscope $end
    $scope module gen_stage(0) $end
     $scope module gen_iter(0) $end
      $var wire 32 w* STAGE_NUM [31:0] $end
      $scope module u_cordic_unit $end
       $var wire 32 5) DATA_OP_WIDTH [31:0] $end
       $var wire 18 9+ ELEM_ANGLE [17:0] $end
       $var wire 32 s( FUNC_WIDTH [31:0] $end
       $var wire 32 {( NUM_ITER [31:0] $end
       $var wire  2 1+ STAGE_NUMBER [1:0] $end
       $var wire  1 =! i_func [0:0] $end
       $var wire 18 )# i_x [17:0] $end
       $var wire 18 1# i_y [17:0] $end
       $var wire 18 9# i_z [17:0] $end
       $var wire 18 A# o_x [17:0] $end
       $var wire 18 I# o_y [17:0] $end
       $var wire 18 Q# o_z [17:0] $end
       $var wire  1 m% sigma $end
       $var wire  1 a# sigma_rot $end
       $var wire  1 Y# sigma_vec $end
       $var wire 18 )# x_shift [17:0] $end
       $var wire 18 1# y_shift [17:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module gen_stage(1) $end
     $scope module gen_iter(0) $end
      $var wire 32 !+ STAGE_NUM [31:0] $end
      $scope module u_cordic_unit $end
       $var wire 32 5) DATA_OP_WIDTH [31:0] $end
       $var wire 18 I+ ELEM_ANGLE [17:0] $end
       $var wire 32 s( FUNC_WIDTH [31:0] $end
       $var wire 32 {( NUM_ITER [31:0] $end
       $var wire  2 A+ STAGE_NUMBER [1:0] $end
       $var wire  1 E! i_func [0:0] $end
       $var wire 18 i# i_x [17:0] $end
       $var wire 18 q# i_y [17:0] $end
       $var wire 18 y# i_z [17:0] $end
       $var wire 18 #$ o_x [17:0] $end
       $var wire 18 +$ o_y [17:0] $end
       $var wire 18 3$ o_z [17:0] $end
       $var wire  1 u% sigma $end
       $var wire  1 S$ sigma_rot $end
       $var wire  1 K$ sigma_vec $end
       $var wire 18 ;$ x_shift [17:0] $end
       $var wire 18 C$ y_shift [17:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module gen_stage(2) $end
     $scope module gen_iter(0) $end
      $var wire 32 )+ STAGE_NUM [31:0] $end
      $scope module u_cordic_unit $end
       $var wire 32 5) DATA_OP_WIDTH [31:0] $end
       $var wire 18 Y+ ELEM_ANGLE [17:0] $end
       $var wire 32 s( FUNC_WIDTH [31:0] $end
       $var wire 32 {( NUM_ITER [31:0] $end
       $var wire  2 Q+ STAGE_NUMBER [1:0] $end
       $var wire  1 M! i_func [0:0] $end
       $var wire 18 [$ i_x [17:0] $end
       $var wire 18 c$ i_y [17:0] $end
       $var wire 18 k$ i_z [17:0] $end
       $var wire 18 s$ o_x [17:0] $end
       $var wire 18 {$ o_y [17:0] $end
       $var wire 18 %% o_z [17:0] $end
       $var wire  1 }% sigma $end
       $var wire  1 E% sigma_rot $end
       $var wire  1 =% sigma_vec $end
       $var wire 18 -% x_shift [17:0] $end
       $var wire 18 5% y_shift [17:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module u_scale $end
    $var wire 32 C, DATA_MUL_WIDTH [31:0] $end
    $var wire 32 5) DATA_OP_WIDTH [31:0] $end
    $var wire 32 %) DATA_WIDTH [31:0] $end
    $var wire 32 s( EN_SCALE [31:0] $end
    $var wire 32 S, FRAC_LSB [31:0] $end
    $var wire 32 S, FRAC_WIDTH [31:0] $end
    $var wire 32 s( FUNC_WIDTH [31:0] $end
    $var wire 32 [, INT_MSB [31:0] $end
    $var wire 32 K, INT_WIDTH [31:0] $end
    $var wire 252 a+ K [251:0] $end
    $var wire 32 {( NUM_DATA [31:0] $end
    $var wire 32 {( NUM_ITER [31:0] $end
    $var wire 32 =) TOTAL_DATA_OP_WIDTH [31:0] $end
    $var wire 32 -) TOTAL_DATA_WIDTH [31:0] $end
    $var wire 32 E) TOTAL_OP_WIDTH [31:0] $end
    $var wire 32 ]) TOTAL_WIDTH [31:0] $end
    $var wire 32 M) X [31:0] $end
    $var wire 32 s( Y [31:0] $end
    $var wire 32 U) Z [31:0] $end
    $var wire 55 M% i_data [54:0] $end
    $var wire  1 3 i_vld $end
    $var wire 49 ]% o_data [48:0] $end
    $var wire  1 3 o_vld $end
    $var wire 16 /& output_data(0) [15:0] $end
    $var wire 16 0& output_data(1) [15:0] $end
    $var wire 16 1& output_data(2) [15:0] $end
    $var wire  1 '& output_func [0:0] $end
    $scope module sc_0 $end
     $var wire 35 G& scale_x [34:0] $end
     $var wire 35 W& scale_y [34:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000000000000000000000000000000000000 #
03
b0000000000000000 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 S
b0000000000000000 T
b0000000000000000 U
0k
0l
0m
0%!
0&!
0'!
0=!
0E!
0M!
b000000000000000000 U!
b000000000000000000 ]!
b000000000000000000 e!
b111110011011011110 m!
b000000000000000000 u!
b000000000000000000 }!
b000000000000000000 '"
b000000000000000000 /"
b000000000000000000 7"
b111111000100101001 ?"
b000000000000000000 G"
b000000000000000000 O"
b000000000000000000 W"
b000000000000000000 _"
b000000000000000000 g"
b111111100000101001 o"
b000000000000000000 w"
b000000000000000000 !#
b000000000000000000 )#
b000000000000000000 1#
b000000000000000000 9#
b000000000000000000 A#
b000000000000000000 I#
b111110011011011110 Q#
1Y#
0a#
b000000000000000000 i#
b000000000000000000 q#
b000000000000000000 y#
b000000000000000000 #$
b000000000000000000 +$
b111111000100101001 3$
b000000000000000000 ;$
b000000000000000000 C$
1K$
0S$
b000000000000000000 [$
b000000000000000000 c$
b000000000000000000 k$
b000000000000000000 s$
b000000000000000000 {$
b111111100000101001 %%
b000000000000000000 -%
b000000000000000000 5%
1=%
0E%
b0000000000000000000000000000000000000111111100000101001 M%
b0000000000000000000000000000000001111100000101001 ]%
0m%
0u%
0}%
0'&
b1111100000101001 /&
b0000000000000000 0&
b0000000000000000 1&
b00000000000000000000000000000000000 G&
b00000000000000000000000000000000000 W&
0g&
b0000000000000000000000000000000000000000000000000 o&
0!'
b0000000000000000000000000000000000000000000000000 )'
09'
0A'
0B'
0Q'
0R'
b000000000000000000 a'
b000000000000000000 i'
b000000000000000000 q'
b000000000000000000 y'
b000000000000000000 #(
b000000000000000000 +(
13(
1;(
0C(
b0000000000000000000000000000000000000000000000000 K(
0[(
b0000000000000000000000000000000000000000000000000 c(
b00000000000000000000000000000001 s(
b00000000000000000000000000000011 {(
b00000000000000000000000000010000 %)
b00000000000000000000000000110000 -)
b00000000000000000000000000010010 5)
b00000000000000000000000000110110 =)
b00000000000000000000000000110111 E)
b00000000000000000000000000000010 M)
b00000000000000000000000000000000 U)
b00000000000000000000000000110001 ])
0e)
1m)
b0110010010001000 u)
b1001101101111000 })
b0011001001000011 '*
b1100110110111101 /*
b000000000000000001000000000000000010000000000000000100000000000000001000000000000000010000000000000000100000000000000001000000000000000010000000000000000100000000000000001000000000000000001111111011000000011111010111000000111011010111000001100100100010 7*
b00000000000000000000000000000000 w*
b00000000000000000000000000000001 !+
b00000000000000000000000000000010 )+
b00 1+
b000001100100100010 9+
b01 A+
b000000111011010111 I+
b10 Q+
b000000011111010111 Y+
b000001001101101110000001001101101110000001001101101110000001001101101110000001001101101110000001001101101110000001001101101110000001001101101110000001001101101111000001001101110001000001001101111011000001001110100010000001010000111101000001011000001010 a+
b00000000000000000000000000100011 C,
b00000000000000000000000000000100 K,
b00000000000000000000000000001101 S,
b00000000000000000000000000011101 [,
#1
03(
#2
13(
#3
03(
#4
13(
#5
03(
#6
13(
#7
03(
#8
13(
#9
03(
#10
b111110011011011110 '"
b111111010110110101 ?"
b111111000100101001 W"
b111111100100000000 o"
b111110011011011110 y#
b111111010110110101 3$
1S$
b111111000100101001 k$
b111111100100000000 %%
1E%
b0000000000000000000000000000000000000111111100100000000 M%
b0000000000000000000000000000000001111100100000000 ]%
1u%
1}%
b1111100100000000 /&
b0000000000000000000000000000000001111100000101001 )'
b111110011011011110 a'
b111111000100101001 y'
13(
0;(
b0000000000000000000000000000000001111100000101001 c(
#11
03(
#12
b111111010110110101 W"
b111111110110001100 o"
b111111010110110101 k$
b111111110110001100 %%
b0000000000000000000000000000000000000111111110110001100 M%
b0000000000000000000000000000000001111110110001100 ]%
b1111110110001100 /&
b0000000000000000000000000000000001111100100000000 )'
b111111010110110101 y'
13(
b0000000000000000000000000000000001111100100000000 c(
#13
03(
#14
b0000000000000000000000000000000001111110110001100 )'
13(
b0000000000000000000000000000000001111110110001100 c(
#15
03(
#16
13(
#17
03(
#18
13(
#19
03(
#20
b0110000000000000011000000000000000010101011101110 #
b0010101011101110 ;
b1100000000000000 <
b1100000000000000 =
b0010101011101110 S
b1100000000000000 T
b1100000000000000 U
1k
b000010101011101110 U!
b111100000000000000 ]!
b111100000000000000 e!
b000001000111001100 m!
b111000000000000000 u!
b111100000000000000 )#
b111100000000000000 1#
b000010101011101110 9#
b111000000000000000 I#
b000001000111001100 Q#
0Y#
1g&
b0110000000000000011000000000000000010101011101110 o&
13(
1C(
b0110000000000000011000000000000000010101011101110 K(
#21
03(
#22
0k
1l
b000001000111001100 '"
b111000000000000000 /"
b000000001011110101 ?"
b111000000000000000 G"
b000100000000000000 O"
b111000000000000000 q#
b000001000111001100 y#
b000100000000000000 #$
b111000000000000000 +$
b000000001011110101 3$
b111100000000000000 C$
0K$
0S$
0u%
0g&
1A'
b000001000111001100 a'
b111000000000000000 i'
13(
0C(
#23
03(
#24
13
0l
1m
b000000001011110101 W"
b111000000000000000 _"
b000100000000000000 g"
b111111101100011110 o"
b111001000000000000 w"
b000110000000000000 !#
b000100000000000000 [$
b111000000000000000 c$
b000000001011110101 k$
b000110000000000000 s$
b111001000000000000 {$
b111111101100011110 %%
b000001000000000000 -%
b111110000000000000 5%
0=%
0E%
b0000110000000000000111001000000000000111111101100011110 M%
b0001110100111000110111011110100011111101100011110 ]%
0}%
b1111101100011110 /&
b1011101111010001 0&
b0011101001110001 1&
b00000000111010011100010000000000000 G&
b11111110111011110100011000000000000 W&
0A'
1B'
b000000001011110101 y'
b111000000000000000 #(
b000100000000000000 +(
13(
#25
03(
#26
03
0m
1!'
b0001110100111000110111011110100011111101100011110 )'
0B'
13(
1[(
b0001110100111000110111011110100011111101100011110 c(
#27
03(
